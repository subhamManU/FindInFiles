package patternSearch.usingJava;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.LineNumberReader;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.io.FileUtils;

/**
 * Hello world!
 *
 */
public class App {
	final static Charset ENCODING = StandardCharsets.UTF_8;

	public static void main(String[] a) {
		System.out.println("-----------------------LIST OF FILES----------------------------------");
		List<String> moduleNameList = new ArrayList<String>();
		moduleNameList.add("cax");
		moduleNameList.add("adp");
		moduleNameList.add("ncm");
		moduleNameList.add("cam");
		moduleNameList.add("exm");
		moduleNameList.add("ref");
		moduleNameList.add("stl");

		for (String moduleName : moduleNameList) {
			System.out.println("======================================" + moduleName.toUpperCase()
					+ "==================================================================");
			getFiles(moduleName);
			System.out.println(
					"===========================================================================================================");
		}

	}

	/**
	 * This method is used to fetch the files from the directory.
	 * 
	 * @param moduleName
	 *            the name of the module within which file need to be searched.
	 * 
	 */
	public static void getFiles(String moduleName) {
		File directory = new File(
				"E:\\GV-Project\\Project-SC\\SC_RUI\\xenos-sc\\devel\\xenos-" + moduleName.trim() + "\\src\\main\\web");
		List<File> fileList = new ArrayList<File>();
		Iterator<File> iter = FileUtils.iterateFiles(directory, new String[] { "jspx" }, true); // to find all files
																								// within the directory
																								// recursively with .js
																								// and .jspx extension

		while (iter.hasNext()) {
			File file = (File) iter.next();
			fileList.add(file);

		}
		search(fileList);

	}

	/**
	 * This method is used to search a particular pattern in the list of files.
	 * 
	 * @param fileList
	 *            the list of files on a module.
	 * 
	 */

	private static void search(List<File> fileList) {
		Pattern nameSpaceRegex = Pattern.compile("type*=*\'hidden\'", Pattern.CASE_INSENSITIVE);
		int count = 0;

		HashSet<String> fileListSet = new HashSet<String>();
		Matcher nameSpaceMatcher = nameSpaceRegex.matcher("");
		for (File f : fileList) {
			Path path = Paths.get(f.getPath());
			try (BufferedReader reader = Files.newBufferedReader(path, ENCODING);
					LineNumberReader lineReader = new LineNumberReader(reader);) {
				String line = null;
				while ((line = lineReader.readLine()) != null) {
					nameSpaceMatcher.reset(line); // reset the input
					if (nameSpaceMatcher.find()) {
						line = line.trim();
						if (f.getName().toLowerCase().contains("query")
								&&(!f.getName().toLowerCase().contains("result") && !f.getName().toLowerCase().contains("summary"))) {
						
							if (!line.contains("id=\"${myId}\"")) {
								fileListSet.add(f.getName());
								// if(line.startsWith("<form:input"))
								System.out.println(line + "\t" + f.getName());
								count++;
							}
						}
					}
				}
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}

		for (String fileName : fileListSet) {
		//	 System.out.println(fileName);
		}
		System.out.println(count);
	}
}
